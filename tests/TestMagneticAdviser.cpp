#include "Painter.h"
#include "MagneticAdviser.h"
#include "InputsWrapper.h"
#include "TestingUtils.h"
#include "Settings.h"

#include <UnitTest++.h>
#include <vector>

SUITE(MagneticAdviser) {

    TEST(Test_MagneticAdviser_High_Current) {
        srand (time(NULL));

        std::vector<double> turnsRatios;

        std::vector<int64_t> numberTurns = {24, 78, 76};
        std::vector<int64_t> numberParallels = {1, 1, 1};

        for (size_t windingIndex = 1; windingIndex < numberTurns.size(); ++windingIndex) {
            turnsRatios.push_back(double(numberTurns[0]) / numberTurns[windingIndex]);
        }

        double frequency = 507026;
        double magnetizingInductance = 100e-6;
        double temperature = 25;
        OpenMagnetics::WaveformLabel waveShape = OpenMagnetics::WaveformLabel::TRIANGULAR;
        double peakToPeak = 100;
        double dutyCycle = 0.5;
        double dcCurrent = 0;

        auto inputs = OpenMagnetics::InputsWrapper::create_quick_operating_point_only_current(frequency,
                                                                                              magnetizingInductance,
                                                                                              temperature,
                                                                                              waveShape,
                                                                                              peakToPeak,
                                                                                              dutyCycle,
                                                                                              dcCurrent,
                                                                                              turnsRatios);

        OpenMagnetics::MasWrapper masMagnetic;
        inputs.process_waveforms();

        OpenMagnetics::MagneticAdviser magneticAdviser;
        auto masMagnetics = magneticAdviser.get_advised_magnetic(inputs, 5);

        for (auto masMagneticWithScoring : masMagnetics) {
            auto masMagnetic = masMagneticWithScoring.first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }
    }

    TEST(Test_MagneticAdviser) {
        srand (time(NULL));

        std::vector<double> turnsRatios;

        std::vector<int64_t> numberTurns = {24, 78, 76};
        std::vector<int64_t> numberParallels = {1, 1, 1};

        for (size_t windingIndex = 1; windingIndex < numberTurns.size(); ++windingIndex) {
            turnsRatios.push_back(double(numberTurns[0]) / numberTurns[windingIndex]);
        }

        double frequency = 507026;
        double magnetizingInductance = 100e-6;
        double temperature = 25;
        OpenMagnetics::WaveformLabel waveShape = OpenMagnetics::WaveformLabel::TRIANGULAR;
        double peakToPeak = 1;
        double dutyCycle = 0.5;
        double dcCurrent = 0;

        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->set_coil_allow_margin_tape(true);
        settings->set_coil_allow_insulated_wire(false);
        settings->set_coil_fill_sections_with_margin_tape(true);

        auto inputs = OpenMagnetics::InputsWrapper::create_quick_operating_point_only_current(frequency,
                                                                                              magnetizingInductance,
                                                                                              temperature,
                                                                                              waveShape,
                                                                                              peakToPeak,
                                                                                              dutyCycle,
                                                                                              dcCurrent,
                                                                                              turnsRatios);


        auto requirements = inputs.get_mutable_design_requirements();
        auto insulationRequirements = requirements.get_insulation().value();
        auto standards = std::vector<OpenMagnetics::InsulationStandards>{OpenMagnetics::InsulationStandards::IEC_606641};
        insulationRequirements.set_standards(standards);
        requirements.set_insulation(insulationRequirements);
        inputs.set_design_requirements(requirements);

        OpenMagnetics::MasWrapper masMagnetic;
        inputs.process_waveforms();

        OpenMagnetics::MagneticAdviser magneticAdviser;
        auto masMagnetics = magneticAdviser.get_advised_magnetic(inputs, 1);
        CHECK(masMagnetics.size() > 0);

        for (auto masMagneticWithScoring : masMagnetics) {
            auto masMagnetic = masMagneticWithScoring.first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }

    }

    TEST(Test_MagneticAdviser_No_Insulation_Requirements) {
        srand (time(NULL));

        std::vector<double> turnsRatios;

        std::vector<int64_t> numberTurns = {24, 78, 76};
        std::vector<int64_t> numberParallels = {1, 1, 1};

        for (size_t windingIndex = 1; windingIndex < numberTurns.size(); ++windingIndex) {
            turnsRatios.push_back(double(numberTurns[0]) / numberTurns[windingIndex]);
        }

        double frequency = 507026;
        double magnetizingInductance = 100e-6;
        double temperature = 25;
        OpenMagnetics::WaveformLabel waveShape = OpenMagnetics::WaveformLabel::TRIANGULAR;
        double peakToPeak = 1;
        double dutyCycle = 0.5;
        double dcCurrent = 0;

        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->set_coil_allow_margin_tape(true);
        settings->set_coil_allow_insulated_wire(false);
        settings->set_coil_fill_sections_with_margin_tape(true);

        auto inputs = OpenMagnetics::InputsWrapper::create_quick_operating_point_only_current(frequency,
                                                                                              magnetizingInductance,
                                                                                              temperature,
                                                                                              waveShape,
                                                                                              peakToPeak,
                                                                                              dutyCycle,
                                                                                              dcCurrent,
                                                                                              turnsRatios);


        auto requirements = inputs.get_mutable_design_requirements();
        requirements.set_insulation(std::nullopt);
        inputs.set_design_requirements(requirements);

        OpenMagnetics::MasWrapper masMagnetic;
        inputs.process_waveforms();

        OpenMagnetics::MagneticAdviser magneticAdviser;
        auto masMagnetics = magneticAdviser.get_advised_magnetic(inputs, 1);
        CHECK(masMagnetics.size() > 0);

        for (auto masMagneticWithScoring : masMagnetics) {
            auto masMagnetic = masMagneticWithScoring.first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }

    }

    TEST(MagneticAdviserJsonHV) {
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->set_coil_fill_sections_with_margin_tape(true);
        std::string masString = R"({"inputs": {"designRequirements": {"insulation": {"altitude": {"maximum": 1000 }, "cti": "Group IIIB", "pollutionDegree": "P2", "overvoltageCategory": "OVC-II", "insulationType": "Basic", "mainSupplyVoltage": {"nominal": null, "minimum": 100, "maximum": 815 }, "standards": ["IEC 60664-1"] }, "leakageInductance": [{"maximum": 0.0000027 }, {"maximum": 7.2e-7 } ], "magnetizingInductance": {"maximum": null, "minimum": null, "nominal": 0.0007 }, "market": "Commercial", "maximumDimensions": {"width": null, "height": 0.02, "depth": null }, "maximumWeight": null, "name": "My Design Requirements", "operatingTemperature": null, "strayCapacitance": [{"maximum": 5e-11 }, {"maximum": 5e-11 } ], "terminalType": ["Pin", "Pin", "Pin"], "topology": "Flyback Converter", "turnsRatios": [{"nominal": 3.6 }, {"nominal": 7 } ] }, "operatingPoints": [{"name": "Operating Point No. 1", "conditions": {"ambientTemperature": 42 }, "excitationsPerWinding": [{"name": "Primary winding excitation", "frequency": 42000, "current": {"waveform": {"ancillaryLabel": null, "data": [0, 0, 1.1, 0, 0 ], "numberPeriods": null, "time": [0, 0, 0.000007, 0.000007, 0.00002380952380952381 ] }, "processed": {"dutyCycle": 0.294, "peakToPeak": 1.1, "offset": 0, "label": "Flyback Primary", "acEffectiveFrequency": 320324.70197566116, "effectiveFrequency": 299906.6380380921, "peak": 1.0815263605442182, "rms": 0.34251379452955516, "thd": 1.070755363168311 }, "harmonics": {"amplitudes": [0.16053906914328236, 0.29202196202762337, 0.21752279286410783, 0.1310845319633303, 0.07713860380309742, 0.06991594662329052, 0.06385479128189217, 0.04886550825820873, 0.041656942163512685, 0.04106933856014564, 0.036071164493133245, 0.03055299653431604, 0.02975135660550652, 0.028391215457215468, 0.02482068925428346, 0.023301839916889198, 0.023120564125526488, 0.021217296242203084, 0.019422484452150467, 0.019302597014669035, 0.018564086064230358, 0.016990298638197066, 0.016530128240448857, 0.016408746965119517, 0.015342013775419296, 0.014571250724490458, 0.014600261585603161, 0.014080719038131833, 0.013228104677648548, 0.013112646237623088, 0.012998033401152062, 0.012300975273665412, 0.011953654437324483, 0.012016309039770377, 0.011608286047010533, 0.011111174591424324, 0.011137874398755002, 0.01101797292674616, 0.010530630511366074, 0.01040049906973778, 0.01046208177619542, 0.010124703775041825, 0.009838808475080322, 0.009931053977331523, 0.0098034018119726, 0.009456464631666566, 0.009454698580407995, 0.009502890216301076, 0.009218272478811467, 0.00907613407579727, 0.009199516076645192, 0.00906471876755199, 0.008824889331959554, 0.008907818118804589, 0.008937898630441313, 0.00869876368067147, 0.008666288051213203, 0.008803433740422266, 0.008663604885115571, 0.008515486625290338, 0.008660125560530002, 0.008670306514975606, 0.008475927879718145, 0.008536460912837853 ], "frequencies": [0, 42000, 84000, 126000, 168000, 210000, 252000, 294000, 336000, 378000, 420000, 462000, 504000, 546000, 588000, 630000, 672000, 714000, 756000, 798000, 840000, 882000, 924000, 966000, 1008000, 1050000, 1092000, 1134000, 1176000, 1218000, 1260000, 1302000, 1344000, 1386000, 1428000, 1470000, 1512000, 1554000, 1596000, 1638000, 1680000, 1722000, 1764000, 1806000, 1848000, 1890000, 1932000, 1974000, 2016000, 2058000, 2100000, 2142000, 2184000, 2226000, 2268000, 2310000, 2352000, 2394000, 2436000, 2478000, 2520000, 2562000, 2604000, 2646000 ] } }, "voltage": {"waveform": {"ancillaryLabel": null, "data": [-29.4, 70.6, 70.6, -29.4, -29.4 ], "numberPeriods": null, "time": [0, 0, 0.000007, 0.000007, 0.00002380952380952381 ] }, "processed": {"dutyCycle": 0.294, "peakToPeak": 100, "offset": 0, "label": "Rectangular", "acEffectiveFrequency": 273993.1760953399, "effectiveFrequency": 273985.04815560044, "peak": 70.6, "rms": 45.33538904652732, "thd": 0.7943280084778311 }, "harmonics": {"amplitudes": [0.4937500000000009, 50.19273146886441, 30.88945734421223, 8.60726309175931, 7.514577540357868, 12.576487416046705, 7.890222788854489, 0.6723406687769768, 6.659332230305735, 6.771471403422372, 2.1663923211140617, 3.134209960512532, 5.356728264586365, 3.4347141143172375, 0.6805380572551197, 3.777520625726094, 3.7722086912079633, 1.0283716619016732, 2.1769829843489013, 3.474177141872247, 2.1027712520453545, 0.6945565902694819, 2.7474727308098412, 2.608727438661375, 0.5486770349329464, 1.7724349572072589, 2.6198081625264167, 1.4623766283543616, 0.71496628279737, 2.2318766983434566, 1.995656440067472, 0.2773827898281461, 1.562500000000001, 2.1411881515502134, 1.0841275629577949, 0.7426431917434089, 1.9342807953981735, 1.620450382955772, 0.09545259242683589, 1.4471144811333827, 1.8430944173488684, 0.8315259963159228, 0.7788650462348548, 1.7521633971823452, 1.3695427043271637, 0.042929496561759636, 1.388303796831737, 1.6472150875774871, 0.6472086912079588, 0.8254655623504514, 1.6415464278026473, 1.1917877639027972, 0.16004318769545572, 1.3696996040394052, 1.5166136111631239, 0.5023333497836172, 0.8850851521101957, 1.581550490460967, 1.0607923422947243, 0.2691521002455623, 1.3846695378376832, 1.4323337135341552, 0.38011439553529425, 0.9615889729028446 ], "frequencies": [0, 42000, 84000, 126000, 168000, 210000, 252000, 294000, 336000, 378000, 420000, 462000, 504000, 546000, 588000, 630000, 672000, 714000, 756000, 798000, 840000, 882000, 924000, 966000, 1008000, 1050000, 1092000, 1134000, 1176000, 1218000, 1260000, 1302000, 1344000, 1386000, 1428000, 1470000, 1512000, 1554000, 1596000, 1638000, 1680000, 1722000, 1764000, 1806000, 1848000, 1890000, 1932000, 1974000, 2016000, 2058000, 2100000, 2142000, 2184000, 2226000, 2268000, 2310000, 2352000, 2394000, 2436000, 2478000, 2520000, 2562000, 2604000, 2646000 ] } } }, {"name": "Primary winding excitation", "frequency": 42000, "current": {"waveform": {"ancillaryLabel": null, "data": [0, 0, 3.96, 0, 0 ], "numberPeriods": null, "time": [0, 0.000011904761904761905, 0.000011904761904761905, 0.00002380952380952381, 0.00002380952380952381 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 3.96, "offset": 0, "label": "Flyback Secondary", "acEffectiveFrequency": 273605.22552591236, "effectiveFrequency": 239619.35667760254, "peak": 3.9599999999999986, "rms": 1.635596311125932, "thd": 0.6765065136547783 }, "harmonics": {"amplitudes": [1.0054687500000032, 1.5109819803933975, 0.6305067526445318, 0.43631079159665215, 0.3156335707813906, 0.25867345007829645, 0.2108457708927511, 0.1845098972167098, 0.15858039332900484, 0.14374429235357594, 0.12732519999086678, 0.11798991339580255, 0.1065764142034965, 0.10027664365108102, 0.09183268563443873, 0.08737513814977015, 0.08084358345172529, 0.0775829517661027, 0.07235909588115942, 0.06991721285428486, 0.06562943182065245, 0.06377074179801741, 0.060177659717708575, 0.05874824283059186, 0.05568602880656547, 0.054581360149729106, 0.051934759310085545, 0.0510815825974439, 0.0487670673260459, 0.048112679051860716, 0.04606818176826717, 0.04557382535330518, 0.043752232085917345, 0.04338887874386873, 0.04175376612752825, 0.04149933709574444, 0.04002209784539918, 0.03985958700992044, 0.038517442612831645, 0.03843361846308103, 0.03720821487910577, 0.037192705080064635, 0.03606910115775439, 0.036113735798427, 0.03507966215426201, 0.03517799562893598, 0.03422330356713118, 0.0343702622545533, 0.03348650869654576, 0.03367812888504953, 0.03285826032368028, 0.03309149205770409, 0.032329601799393176, 0.032602161771072315, 0.0318933023014623, 0.032203563952980456, 0.031543601457069734, 0.03189051394290526, 0.03127601564366044, 0.03165904576198601, 0.03108719333289207, 0.0315062863179612, 0.03097481051580278, 0.03143036691725387 ], "frequencies": [0, 42000, 84000, 126000, 168000, 210000, 252000, 294000, 336000, 378000, 420000, 462000, 504000, 546000, 588000, 630000, 672000, 714000, 756000, 798000, 840000, 882000, 924000, 966000, 1008000, 1050000, 1092000, 1134000, 1176000, 1218000, 1260000, 1302000, 1344000, 1386000, 1428000, 1470000, 1512000, 1554000, 1596000, 1638000, 1680000, 1722000, 1764000, 1806000, 1848000, 1890000, 1932000, 1974000, 2016000, 2058000, 2100000, 2142000, 2184000, 2226000, 2268000, 2310000, 2352000, 2394000, 2436000, 2478000, 2520000, 2562000, 2604000, 2646000 ] } }, "voltage": {"waveform": {"ancillaryLabel": null, "data": [-13.89, 13.89, 13.89, -13.89, -13.89 ], "numberPeriods": null, "time": [0, 0, 0.000011904761904761905, 0.000011904761904761905, 0.00002380952380952381 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 27.78, "offset": 0, "label": "Rectangular", "acEffectiveFrequency": 248423.92512497256, "effectiveFrequency": 248408.7565140517, "peak": 13.89, "rms": 13.890000000000022, "thd": 0.48331514845248535 }, "harmonics": {"amplitudes": [0.21703125, 17.681745968226167, 0.4340625, 5.884441743008607, 0.4340625, 3.5192857754085134, 0.4340625, 2.50156382659689, 0.4340625, 1.932968090534883, 0.4340625, 1.56850033166751, 0.4340625, 1.313925940874188, 0.4340625, 1.1252647178556892, 0.4340625, 0.9792293094780014, 0.4340625, 0.8623340820515439, 0.4340625, 0.7662274695502621, 0.4340625, 0.6854595927802318, 0.4340625, 0.6163213952979067, 0.4340625, 0.5561996920846202, 0.4340625, 0.5031990666519233, 0.4340625, 0.45591010107099894, 0.4340625, 0.41326185461487136, 0.4340625, 0.3744248874701925, 0.4340625, 0.33874569976854113, 0.4340625, 0.30570130348173624, 0.4340625, 0.2748670467095772, 0.4340625, 0.24589336899764186, 0.4340625, 0.21848870156913297, 0.4340625, 0.1924066733732579, 0.4340625, 0.16743638267205946, 0.4340625, 0.1433948809785266, 0.4340625, 0.12012127132032469, 0.4340625, 0.09747199388796957, 0.4340625, 0.07531698847858959, 0.4340625, 0.05353650312310587, 0.4340625, 0.03201837355771753, 0.4340625, 0.0106556362841701 ], "frequencies": [0, 42000, 84000, 126000, 168000, 210000, 252000, 294000, 336000, 378000, 420000, 462000, 504000, 546000, 588000, 630000, 672000, 714000, 756000, 798000, 840000, 882000, 924000, 966000, 1008000, 1050000, 1092000, 1134000, 1176000, 1218000, 1260000, 1302000, 1344000, 1386000, 1428000, 1470000, 1512000, 1554000, 1596000, 1638000, 1680000, 1722000, 1764000, 1806000, 1848000, 1890000, 1932000, 1974000, 2016000, 2058000, 2100000, 2142000, 2184000, 2226000, 2268000, 2310000, 2352000, 2394000, 2436000, 2478000, 2520000, 2562000, 2604000, 2646000 ] } } }, {"name": "Primary winding excitation", "frequency": 42000, "current": {"waveform": {"ancillaryLabel": null, "data": [0, 0, 0.08, 0, 0 ], "numberPeriods": null, "time": [0, 0.000011904761904761905, 0.000011904761904761905, 0.00002380952380952381, 0.00002380952380952381 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 0.08, "offset": 0, "label": "Flyback Secondary", "acEffectiveFrequency": 273605.2255259123, "effectiveFrequency": 239619.35667760245, "peak": 0.07999999999999997, "rms": 0.03304234971971578, "thd": 0.6765065136547783 }, "harmonics": {"amplitudes": [0.020312500000000067, 0.030524888492795912, 0.012737510154434986, 0.008814359426194993, 0.006376435773361427, 0.00522572626420801, 0.004259510523085881, 0.0037274726710446416, 0.0032036443096768643, 0.0029039250980520386, 0.0025722262624417523, 0.002383634614056616, 0.002153058872797908, 0.0020257907808299194, 0.0018552057703927027, 0.0017651543060559615, 0.0016332037060954627, 0.0015673323589111663, 0.0014617999167910994, 0.0014124689465512088, 0.001325847107487929, 0.0012882978141013626, 0.0012157102973274464, 0.001186833188496806, 0.001124970278920515, 0.0011026537403985668, 0.0010491870567694052, 0.0010319511635847236, 0.0009851932793140594, 0.000971973314179004, 0.0009306703387528712, 0.0009206833404708095, 0.0008838834764831795, 0.0008765430049266404, 0.0008435104268187535, 0.0008383704463786768, 0.000808527229199984, 0.0008052441820185946, 0.0007781301537945788, 0.0007764367366278998, 0.0007516811086688038, 0.0007513677793952459, 0.0007286687102576646, 0.0007295704201702419, 0.0007086800435204446, 0.0007106665783623426, 0.000691379870043054, 0.0006943487324152177, 0.0006764951251827419, 0.00068036624010201, 0.0006638032388622281, 0.0006685149910647295, 0.000653123268674609, 0.0006586295307287333, 0.0006443091374032789, 0.0006505770495551611, 0.0006372444738801973, 0.0006442528069273796, 0.0006318386998719282, 0.0006395766820603246, 0.0006280241077351936, 0.0006364906326860852, 0.0006257537477939952, 0.0006349569074192705 ], "frequencies": [0, 42000, 84000, 126000, 168000, 210000, 252000, 294000, 336000, 378000, 420000, 462000, 504000, 546000, 588000, 630000, 672000, 714000, 756000, 798000, 840000, 882000, 924000, 966000, 1008000, 1050000, 1092000, 1134000, 1176000, 1218000, 1260000, 1302000, 1344000, 1386000, 1428000, 1470000, 1512000, 1554000, 1596000, 1638000, 1680000, 1722000, 1764000, 1806000, 1848000, 1890000, 1932000, 1974000, 2016000, 2058000, 2100000, 2142000, 2184000, 2226000, 2268000, 2310000, 2352000, 2394000, 2436000, 2478000, 2520000, 2562000, 2604000, 2646000 ] } }, "voltage": {"waveform": {"ancillaryLabel": null, "data": [-7.14, 7.14, 7.14, -7.14, -7.14 ], "numberPeriods": null, "time": [0, 0, 0.000011904761904761905, 0.000011904761904761905, 0.00002380952380952381 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 14.28, "offset": 0, "label": "Rectangular", "acEffectiveFrequency": 248423.9251249721, "effectiveFrequency": 248408.75651405123, "peak": 7.14, "rms": 7.139999999999993, "thd": 0.4833151484524845 }, "harmonics": {"amplitudes": [0.1115625, 9.08910483895859, 0.223125, 3.0248318246998886, 0.223125, 1.8090497074454124, 0.223125, 1.2859010598921377, 0.223125, 0.9936207463224668, 0.223125, 0.8062701488917218, 0.223125, 0.6754090149634054, 0.223125, 0.5784298117703113, 0.223125, 0.5033619344616945, 0.223125, 0.44327324304161464, 0.223125, 0.3938707078897675, 0.223125, 0.3523528792261233, 0.223125, 0.3168131578421202, 0.223125, 0.285908265045658, 0.223125, 0.2586638830737746, 0.223125, 0.23435551631727392, 0.223125, 0.21243265960764457, 0.223125, 0.19246894863478564, 0.223125, 0.1741284590602866, 0.223125, 0.1571423547055144, 0.223125, 0.14129234798462062, 0.223125, 0.1263987512342087, 0.223125, 0.1123116867677183, 0.223125, 0.09890451028690123, 0.223125, 0.08606881009924447, 0.223125, 0.07371054356995504, 0.223125, 0.0617470034000806, 0.223125, 0.05010439426638574, 0.223125, 0.0387158601682599, 0.223125, 0.027519843938011213, 0.223125, 0.016458688783449027, 0.223125, 0.005477411308063118 ], "frequencies": [0, 42000, 84000, 126000, 168000, 210000, 252000, 294000, 336000, 378000, 420000, 462000, 504000, 546000, 588000, 630000, 672000, 714000, 756000, 798000, 840000, 882000, 924000, 966000, 1008000, 1050000, 1092000, 1134000, 1176000, 1218000, 1260000, 1302000, 1344000, 1386000, 1428000, 1470000, 1512000, 1554000, 1596000, 1638000, 1680000, 1722000, 1764000, 1806000, 1848000, 1890000, 1932000, 1974000, 2016000, 2058000, 2100000, 2142000, 2184000, 2226000, 2268000, 2310000, 2352000, 2394000, 2436000, 2478000, 2520000, 2562000, 2604000, 2646000 ] } } } ] } ] }, "magnetic": {"coil": {"functionalDescription": [{"name": "Primary"}, {"name": "Secondary"}, {"name": "Tertiary"} ] } } })";
        json masJson = json::parse(masString);

        if (masJson["inputs"]["designRequirements"]["insulation"]["cti"] == "GROUP_IIIa") {
            masJson["inputs"]["designRequirements"]["insulation"]["cti"] = "GROUP_IIIA";
        }
        if (masJson["inputs"]["designRequirements"]["insulation"]["cti"] == "GROUP_IIIb") {
            masJson["inputs"]["designRequirements"]["insulation"]["cti"] = "GROUP_IIIB";
        }

        OpenMagnetics::InputsWrapper inputs(masJson["inputs"]);
        OpenMagnetics::MasWrapper masMagnetic;

        OpenMagnetics::MagneticAdviser MagneticAdviser;
        auto masMagnetics = MagneticAdviser.get_advised_magnetic(inputs, 2);
        CHECK(masMagnetics.size() > 0);

        if (masMagnetics.size() > 0) {
            auto masMagnetic = masMagnetics[0].first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }
    }

    TEST(MagneticAdviserJsonLV) {
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        settings->set_coil_fill_sections_with_margin_tape(true);
        std::string masString = R"({"inputs": {"designRequirements": {"insulation": {"altitude": {"maximum": 1000 }, "cti": "Group IIIB", "pollutionDegree": "P2", "overvoltageCategory": "OVC-II", "insulationType": "Basic", "mainSupplyVoltage": {"nominal": 120, "minimum": 20, "maximum": 450 }, "standards": ["IEC 60664-1"] }, "leakageInductance": [{"maximum": 0.00000135 }, {"maximum": 0.00000135 } ], "magnetizingInductance": {"maximum": 0.000088, "minimum": 0.000036, "nominal": 0.000039999999999999996 }, "market": "Commercial", "maximumDimensions": {"width": null, "height": 0.02, "depth": null }, "maximumWeight": null, "name": "My Design Requirements", "operatingTemperature": null, "strayCapacitance": [{"maximum": 5e-11 }, {"maximum": 5e-11 } ], "terminalType": ["Pin", "Pin", "Pin"], "topology": "Flyback Converter", "turnsRatios": [{"nominal": 1.2 }, {"nominal": 1.2 } ] }, "operatingPoints": [{"name": "Operating Point No. 1", "conditions": {"ambientTemperature": 42 }, "excitationsPerWinding": [{"name": "Primary winding excitation", "frequency": 36000, "current": {"waveform": {"ancillaryLabel": null, "data": [0, 0, 5.5, 0, 0 ], "numberPeriods": null, "time": [0, 0, 0.000011111111111111112, 0.000011111111111111112, 0.00002777777777777778 ] }, "processed": {"dutyCycle": 0.4, "peakToPeak": 5.5, "offset": 0, "label": "Flyback Primary", "acEffectiveFrequency": 247671.20334838802, "effectiveFrequency": 224591.09893738205, "peak": 5.478515625000006, "rms": 2.025897603604934, "thd": 0.8123116860415294 }, "harmonics": {"amplitudes": [1.1128234863281259, 1.8581203560604207, 1.051281221517565, 0.5159082238421047, 0.4749772671818343, 0.35101798151542746, 0.28680520988943464, 0.26606329358167974, 0.2109058168232097, 0.2038324242201338, 0.17683391011628416, 0.15977271740890614, 0.15330090420784062, 0.13359870506402888, 0.1311678604251054, 0.11938227872282572, 0.11196939263234992, 0.10881687126769939, 0.09881440376099933, 0.09781517962337143, 0.09113803697574208, 0.08720137281111257, 0.08534603089826898, 0.07933100843010468, 0.07894777491614259, 0.0746052794656816, 0.07229734773884018, 0.07109041486606842, 0.0670974294019412, 0.06703716258861198, 0.06396085871081211, 0.0625474905371643, 0.06171647321147238, 0.05889230550248535, 0.059028047581821314, 0.05671822612277054, 0.05585484049699437, 0.055265364667603324, 0.0531817689812044, 0.053452567468547284, 0.05164394009764037, 0.051150939884780554, 0.05072953903613357, 0.049149522805038266, 0.049525208170729855, 0.04806384343218855, 0.04784167797419847, 0.047545488047249944, 0.04632889186784806, 0.046795775944523485, 0.045586400651502844, 0.045578916197115495, 0.045382141359988915, 0.04444264358178238, 0.04499725549277023, 0.04397809673849301, 0.04415534166549457, 0.044042673430388084, 0.04332652563384539, 0.04397294643650677, 0.043102730085842, 0.043452676225114936, 0.04341597260904029, 0.04289100286968138 ], "frequencies": [0, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 468000, 504000, 540000, 576000, 612000, 648000, 684000, 720000, 756000, 792000, 828000, 864000, 900000, 936000, 972000, 1008000, 1044000, 1080000, 1116000, 1152000, 1188000, 1224000, 1260000, 1296000, 1332000, 1368000, 1404000, 1440000, 1476000, 1512000, 1548000, 1584000, 1620000, 1656000, 1692000, 1728000, 1764000, 1800000, 1836000, 1872000, 1908000, 1944000, 1980000, 2016000, 2052000, 2088000, 2124000, 2160000, 2196000, 2232000, 2268000 ] } }, "voltage": {"waveform": {"ancillaryLabel": null, "data": [-8, 12, 12, -8, -8 ], "numberPeriods": null, "time": [0, 0, 0.000011111111111111112, 0.000011111111111111112, 0.00002777777777777778 ] }, "processed": {"dutyCycle": 0.4, "peakToPeak": 20, "offset": 0, "label": "Rectangular", "acEffectiveFrequency": 217445.61780293446, "effectiveFrequency": 217445.06394458748, "peak": 12, "rms": 9.79157801378307, "thd": 0.5579294461931013 }, "harmonics": {"amplitudes": [0.03125, 12.090982167347164, 3.7938629699811433, 2.4460154592542187, 3.050934294867692, 0.06265085868474476, 2.0052584267980813, 1.1245773748206938, 0.8899247078195547, 1.3746157728063957, 0.06310658027096225, 1.0931619934351904, 0.682943044655975, 0.5329821111108219, 0.8998037891938968, 0.06387675236155328, 0.7544417382415929, 0.5036912732460003, 0.37575767434186663, 0.6781566555968945, 0.06497787099509279, 0.579613707579126, 0.4082105683349906, 0.28790910341678466, 0.5516771452281819, 0.06643416431010025, 0.4742269329016237, 0.35024440150573616, 0.23220844850577863, 0.4713901788294872, 0.0682788501833682, 0.40480954492681936, 0.3125, 0.19399945657286152, 0.41719035005974064, 0.07055595095604376, 0.35652867811806305, 0.28709106236926035, 0.16634675530328177, 0.3793488450042862, 0.07332285477181877, 0.32183350571658953, 0.2699539504381825, 0.14554626367323475, 0.3526337777044684, 0.0766539126369276, 0.29650814745710025, 0.25883312123614344, 0.12944173824159266, 0.33403609127672834, 0.08064551519955634, 0.27805045130481554, 0.25243555700995646, 0.1166943265232067, 0.3217665194149353, 0.08542334196565987, 0.2649247078195551, 0.250039428516803, 0.10643002348369442, 0.31477312120987916, 0.09115288771096393, 0.25618941041585475, 0.2513050615401854, 0.098055076230366 ], "frequencies": [0, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 468000, 504000, 540000, 576000, 612000, 648000, 684000, 720000, 756000, 792000, 828000, 864000, 900000, 936000, 972000, 1008000, 1044000, 1080000, 1116000, 1152000, 1188000, 1224000, 1260000, 1296000, 1332000, 1368000, 1404000, 1440000, 1476000, 1512000, 1548000, 1584000, 1620000, 1656000, 1692000, 1728000, 1764000, 1800000, 1836000, 1872000, 1908000, 1944000, 1980000, 2016000, 2052000, 2088000, 2124000, 2160000, 2196000, 2232000, 2268000 ] } } }, {"name": "Primary winding excitation", "frequency": 36000, "current": {"waveform": {"ancillaryLabel": null, "data": [0, 0, 6.6, 0, 0 ], "numberPeriods": null, "time": [0, 0.00001388888888888889, 0.00001388888888888889, 0.00002777777777777778, 0.00002777777777777778 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 6.6, "offset": 0, "label": "Flyback Secondary", "acEffectiveFrequency": 234518.76473649617, "effectiveFrequency": 205388.02000937346, "peak": 6.599999999999992, "rms": 2.7259938518765505, "thd": 0.6765065136547781 }, "harmonics": {"amplitudes": [1.6757812500000036, 2.5183033006556617, 1.0508445877408874, 0.7271846526610849, 0.5260559513023173, 0.43112241679715924, 0.35140961815458516, 0.30751649536118214, 0.2643006555483416, 0.23957382058929272, 0.21220866665144478, 0.19664985565967041, 0.17762735700582763, 0.16712773941846806, 0.15305447605739808, 0.14562523024961643, 0.13473930575287565, 0.12930491961017093, 0.12059849313526576, 0.11652868809047452, 0.10938238636775419, 0.10628456966336206, 0.10029609952951436, 0.0979137380509861, 0.09281004801094254, 0.09096893358288156, 0.08655793218347599, 0.08513597099573951, 0.08127844554340995, 0.08018779841976777, 0.07678030294711186, 0.07595637558884157, 0.07292038680986246, 0.07231479790644763, 0.06958961021254718, 0.06916556182624073, 0.06670349640899874, 0.06643264501653386, 0.06419573768805274, 0.06405603077180153, 0.062013691465176275, 0.0619878418001075, 0.060115168596257366, 0.060189559664044844, 0.058466103590436726, 0.05862999271489314, 0.05703883927855185, 0.05728377042425536, 0.05581084782757627, 0.05613021480841572, 0.054763767206133816, 0.05515248676284005, 0.05388266966565528, 0.05433693628512042, 0.05315550383577058, 0.05367260658830061, 0.05257266909511635, 0.05315085657150875, 0.052126692739434176, 0.05276507626997662, 0.05181198888815346, 0.05251047719660189, 0.051624684193004804, 0.05238394486208969 ], "frequencies": [0, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 468000, 504000, 540000, 576000, 612000, 648000, 684000, 720000, 756000, 792000, 828000, 864000, 900000, 936000, 972000, 1008000, 1044000, 1080000, 1116000, 1152000, 1188000, 1224000, 1260000, 1296000, 1332000, 1368000, 1404000, 1440000, 1476000, 1512000, 1548000, 1584000, 1620000, 1656000, 1692000, 1728000, 1764000, 1800000, 1836000, 1872000, 1908000, 1944000, 1980000, 2016000, 2052000, 2088000, 2124000, 2160000, 2196000, 2232000, 2268000 ] } }, "voltage": {"waveform": {"ancillaryLabel": null, "data": [-8.335, 8.335, 8.335, -8.335, -8.335 ], "numberPeriods": null, "time": [0, 0, 0.00001388888888888889, 0.00001388888888888889, 0.00002777777777777778 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 16.67, "offset": 0, "label": "Rectangular", "acEffectiveFrequency": 212934.79296426187, "effectiveFrequency": 212921.79129775826, "peak": 8.335, "rms": 8.33500000000001, "thd": 0.48331514845248513 }, "harmonics": {"amplitudes": [0.130234375, 10.610320564806702, 0.26046875, 3.531088691718988, 0.26046875, 2.1118248335514735, 0.26046875, 1.5011183941457937, 0.26046875, 1.1599200168904427, 0.26046875, 0.9412131219905466, 0.26046875, 0.7884501596246478, 0.26046875, 0.6752398432920929, 0.26046875, 0.587608084557174, 0.26046875, 0.5174625323181874, 0.26046875, 0.4597916456948479, 0.26046875, 0.4113251048108877, 0.26046875, 0.36983720876947807, 0.26046875, 0.333759858425148, 0.26046875, 0.3019556674257579, 0.26046875, 0.2735788835440449, 0.26046875, 0.24798686524225744, 0.26046875, 0.2246818889174983, 0.26046875, 0.20327180760048874, 0.26046875, 0.18344279082219334, 0.26046875, 0.16494001687000165, 0.26046875, 0.14755372430492025, 0.26046875, 0.1311089508695984, 0.26046875, 0.1154578561962637, 0.26046875, 0.10047388405843227, 0.26046875, 0.0860472521926578, 0.26046875, 0.0720814108318868, 0.26046875, 0.058490213754947895, 0.26046875, 0.04519561547653339, 0.26046875, 0.032125756193742694, 0.26046875, 0.019213329273115587, 0.26046875, 0.006394148914942832 ], "frequencies": [0, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 468000, 504000, 540000, 576000, 612000, 648000, 684000, 720000, 756000, 792000, 828000, 864000, 900000, 936000, 972000, 1008000, 1044000, 1080000, 1116000, 1152000, 1188000, 1224000, 1260000, 1296000, 1332000, 1368000, 1404000, 1440000, 1476000, 1512000, 1548000, 1584000, 1620000, 1656000, 1692000, 1728000, 1764000, 1800000, 1836000, 1872000, 1908000, 1944000, 1980000, 2016000, 2052000, 2088000, 2124000, 2160000, 2196000, 2232000, 2268000 ] } } }, {"name": "Primary winding excitation", "frequency": 36000, "current": {"waveform": {"ancillaryLabel": null, "data": [0, 0, 0.08, 0, 0 ], "numberPeriods": null, "time": [0, 0.00001388888888888889, 0.00001388888888888889, 0.00002777777777777778, 0.00002777777777777778 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 0.08, "offset": 0, "label": "Flyback Secondary", "acEffectiveFrequency": 234518.7647364962, "effectiveFrequency": 205388.02000937346, "peak": 0.0799999999999999, "rms": 0.033042349719715765, "thd": 0.6765065136547783 }, "harmonics": {"amplitudes": [0.020312500000000046, 0.030524888492795898, 0.012737510154435002, 0.008814359426194969, 0.006376435773361423, 0.005225726264207993, 0.004259510523085882, 0.003727472671044633, 0.0032036443096768678, 0.0029039250980520334, 0.002572226262441755, 0.002383634614056611, 0.0021530588727979106, 0.0020257907808299163, 0.001855205770392704, 0.0017651543060559591, 0.0016332037060954637, 0.0015673323589111632, 0.0014617999167910998, 0.0014124689465512055, 0.0013258471074879294, 0.0012882978141013591, 0.0012157102973274472, 0.0011868331884968021, 0.0011249702789205155, 0.0011026537403985642, 0.0010491870567694056, 0.0010319511635847216, 0.0009851932793140603, 0.0009719733141790018, 0.0009306703387528721, 0.0009206833404708108, 0.0008838834764831795, 0.0008765430049266376, 0.0008435104268187531, 0.0008383704463786751, 0.0008085272291999843, 0.0008052441820185928, 0.0007781301537945793, 0.0007764367366278984, 0.0007516811086688035, 0.0007513677793952425, 0.0007286687102576648, 0.0007295704201702394, 0.0007086800435204447, 0.0007106665783623409, 0.0006913798700430537, 0.0006943487324152148, 0.0006764951251827443, 0.0006803662401020098, 0.0006638032388622283, 0.0006685149910647278, 0.0006531232686746098, 0.0006586295307287323, 0.0006443091374032788, 0.0006505770495551569, 0.0006372444738801973, 0.0006442528069273779, 0.0006318386998719287, 0.0006395766820603229, 0.0006280241077351938, 0.0006364906326860843, 0.0006257537477939962, 0.0006349569074192687 ], "frequencies": [0, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 468000, 504000, 540000, 576000, 612000, 648000, 684000, 720000, 756000, 792000, 828000, 864000, 900000, 936000, 972000, 1008000, 1044000, 1080000, 1116000, 1152000, 1188000, 1224000, 1260000, 1296000, 1332000, 1368000, 1404000, 1440000, 1476000, 1512000, 1548000, 1584000, 1620000, 1656000, 1692000, 1728000, 1764000, 1800000, 1836000, 1872000, 1908000, 1944000, 1980000, 2016000, 2052000, 2088000, 2124000, 2160000, 2196000, 2232000, 2268000 ] } }, "voltage": {"waveform": {"ancillaryLabel": null, "data": [-8.335, 8.335, 8.335, -8.335, -8.335 ], "numberPeriods": null, "time": [0, 0, 0.00001388888888888889, 0.00001388888888888889, 0.00002777777777777778 ] }, "processed": {"dutyCycle": 0.5, "peakToPeak": 16.67, "offset": 0, "label": "Rectangular", "acEffectiveFrequency": 212934.79296426187, "effectiveFrequency": 212921.79129775826, "peak": 8.335, "rms": 8.33500000000001, "thd": 0.48331514845248513 }, "harmonics": {"amplitudes": [0.130234375, 10.610320564806702, 0.26046875, 3.531088691718988, 0.26046875, 2.1118248335514735, 0.26046875, 1.5011183941457937, 0.26046875, 1.1599200168904427, 0.26046875, 0.9412131219905466, 0.26046875, 0.7884501596246478, 0.26046875, 0.6752398432920929, 0.26046875, 0.587608084557174, 0.26046875, 0.5174625323181874, 0.26046875, 0.4597916456948479, 0.26046875, 0.4113251048108877, 0.26046875, 0.36983720876947807, 0.26046875, 0.333759858425148, 0.26046875, 0.3019556674257579, 0.26046875, 0.2735788835440449, 0.26046875, 0.24798686524225744, 0.26046875, 0.2246818889174983, 0.26046875, 0.20327180760048874, 0.26046875, 0.18344279082219334, 0.26046875, 0.16494001687000165, 0.26046875, 0.14755372430492025, 0.26046875, 0.1311089508695984, 0.26046875, 0.1154578561962637, 0.26046875, 0.10047388405843227, 0.26046875, 0.0860472521926578, 0.26046875, 0.0720814108318868, 0.26046875, 0.058490213754947895, 0.26046875, 0.04519561547653339, 0.26046875, 0.032125756193742694, 0.26046875, 0.019213329273115587, 0.26046875, 0.006394148914942832 ], "frequencies": [0, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 468000, 504000, 540000, 576000, 612000, 648000, 684000, 720000, 756000, 792000, 828000, 864000, 900000, 936000, 972000, 1008000, 1044000, 1080000, 1116000, 1152000, 1188000, 1224000, 1260000, 1296000, 1332000, 1368000, 1404000, 1440000, 1476000, 1512000, 1548000, 1584000, 1620000, 1656000, 1692000, 1728000, 1764000, 1800000, 1836000, 1872000, 1908000, 1944000, 1980000, 2016000, 2052000, 2088000, 2124000, 2160000, 2196000, 2232000, 2268000 ] } } } ] } ] }, "magnetic": {"coil": {"functionalDescription": [{"name": "Primary"}, {"name": "Secondary"}, {"name": "Tertiary"} ] } } })";
        json masJson = json::parse(masString);

        if (masJson["inputs"]["designRequirements"]["insulation"]["cti"] == "GROUP_IIIa") {
            masJson["inputs"]["designRequirements"]["insulation"]["cti"] = "GROUP_IIIA";
        }
        if (masJson["inputs"]["designRequirements"]["insulation"]["cti"] == "GROUP_IIIb") {
            masJson["inputs"]["designRequirements"]["insulation"]["cti"] = "GROUP_IIIB";
        }

        OpenMagnetics::InputsWrapper inputs(masJson["inputs"]);
        OpenMagnetics::MasWrapper masMagnetic;
        // inputs.process_waveforms();

        OpenMagnetics::MagneticAdviser MagneticAdviser;
        auto masMagnetics = MagneticAdviser.get_advised_magnetic(inputs, 1);

        CHECK(masMagnetics.size() > 0);

        if (masMagnetics.size() > 0) {
            auto masMagnetic = masMagnetics[0].first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }
    }

    TEST(Test_MagneticAdviser_Random) {
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        srand (time(NULL));

        int count = 10;
        while (count > 0) {
            std::vector<double> turnsRatios;

            std::vector<int64_t> numberTurns;
            std::vector<OpenMagnetics::IsolationSide> isolationSides;
            // for (size_t windingIndex = 0; windingIndex < std::rand() % 2 + 1UL; ++windingIndex)
            for (size_t windingIndex = 0; windingIndex < std::rand() % 4 + 1UL; ++windingIndex)
            {
                numberTurns.push_back(std::rand() % 100 + 1L);
                isolationSides.push_back(OpenMagnetics::get_isolation_side_from_index(static_cast<size_t>(std::rand() % 10 + 1L)));
            }
            for (size_t windingIndex = 1; windingIndex < numberTurns.size(); ++windingIndex) {
                turnsRatios.push_back(double(numberTurns[0]) / numberTurns[windingIndex]);
            }

            double frequency = std::rand() % 1000000 + 10000L;
            double magnetizingInductance = double(std::rand() % 10000) *  1e-6;
            double temperature = 25;
            double peakToPeak = std::rand() % 30 + 1L;
            double dutyCycle = double(std::rand() % 99 + 1L) / 100;
            double dcCurrent = 0;
            if (numberTurns.size() == 1) {
                dcCurrent = std::rand() % 30;
            }

            int waveShapeIndex = std::rand() % magic_enum::enum_count<OpenMagnetics::WaveformLabel>();

            OpenMagnetics::WaveformLabel waveShape = magic_enum::enum_cast<OpenMagnetics::WaveformLabel>(waveShapeIndex).value();
            if (waveShape == OpenMagnetics::WaveformLabel::BIPOLAR_RECTANGULAR ||
                waveShape == OpenMagnetics::WaveformLabel::CUSTOM ||
                waveShape == OpenMagnetics::WaveformLabel::RECTANGULAR ||
                waveShape == OpenMagnetics::WaveformLabel::UNIPOLAR_RECTANGULAR) {
                waveShape = OpenMagnetics::WaveformLabel::TRIANGULAR;
            }

            auto inputs = OpenMagnetics::InputsWrapper::create_quick_operating_point_only_current(frequency,
                                                                                                  magnetizingInductance,
                                                                                                  temperature,
                                                                                                  waveShape,
                                                                                                  peakToPeak,
                                                                                                  dutyCycle,
                                                                                                  dcCurrent,
                                                                                                  turnsRatios);

            inputs.get_mutable_design_requirements().set_isolation_sides(isolationSides);
            inputs.process_waveforms();

            try {
                OpenMagnetics::MagneticAdviser MagneticAdviser;
                auto masMagnetics = MagneticAdviser.get_advised_magnetic(inputs, 1);
                count--;
            }
            catch (...) {
                for (size_t windingIndex = 0; windingIndex < numberTurns.size(); ++windingIndex) {
                    std::cout << "numberTurns: " << numberTurns[windingIndex] << std::endl;
                }
                for (size_t windingIndex = 0; windingIndex < numberTurns.size(); ++windingIndex) {
                    std::cout << "isolationSides: " << magic_enum::enum_name(isolationSides[windingIndex]) << std::endl;
                }
                std::cout << "frequency: " << frequency << std::endl;
                std::cout << "peakToPeak: " << peakToPeak << std::endl;
                std::cout << "magnetizingInductance: " << magnetizingInductance << std::endl;
                std::cout << "dutyCycle: " << dutyCycle << std::endl;
                std::cout << "dcCurrent: " << dcCurrent << std::endl;
                std::cout << "waveShape: " << magic_enum::enum_name(waveShape) << std::endl;
                CHECK(false);
                return;
            }

        }
    }

    TEST(Test_MagneticAdviser_Random_0) {
        srand (time(NULL));

        std::vector<double> turnsRatios;

        std::vector<int64_t> numberTurns = {40, 75};
        std::vector<OpenMagnetics::IsolationSide> isolationSides = {OpenMagnetics::IsolationSide::SENARY,
                                                                    OpenMagnetics::IsolationSide::SECONDARY};

        for (size_t windingIndex = 1; windingIndex < numberTurns.size(); ++windingIndex) {
            turnsRatios.push_back(double(numberTurns[0]) / numberTurns[windingIndex]);
        }

        double frequency = 25280;
        double peakToPeak = 28;
        double magnetizingInductance = 0.004539;
        double dutyCycle = 0.68;
        double dcCurrent = 0;
        double temperature = 25;
        OpenMagnetics::WaveformLabel waveShape = OpenMagnetics::WaveformLabel::SINUSOIDAL;

        auto inputs = OpenMagnetics::InputsWrapper::create_quick_operating_point_only_current(frequency,
                                                                                              magnetizingInductance,
                                                                                              temperature,
                                                                                              waveShape,
                                                                                              peakToPeak,
                                                                                              dutyCycle,
                                                                                              dcCurrent,
                                                                                              turnsRatios);

        inputs.get_mutable_design_requirements().set_isolation_sides(isolationSides);
        inputs.process_waveforms();

        OpenMagnetics::MagneticAdviser MagneticAdviser;
        auto masMagnetics = MagneticAdviser.get_advised_magnetic(inputs, 1);

        if (masMagnetics.size() > 0) {
            auto masMagnetic = masMagnetics[0].first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }
    }

    TEST(Test_MagneticAdviser_Random_1) {
        srand (time(NULL));

        std::vector<double> turnsRatios;

        std::vector<int64_t> numberTurns = {24};
        std::vector<OpenMagnetics::IsolationSide> isolationSides = {OpenMagnetics::IsolationSide::SECONDARY};

        for (size_t windingIndex = 1; windingIndex < numberTurns.size(); ++windingIndex) {
            turnsRatios.push_back(double(numberTurns[0]) / numberTurns[windingIndex]);
        }

        double frequency = 47405;
        double peakToPeak = 25;
        double magnetizingInductance = 0.000831;
        double dutyCycle = 0.05;
        double dcCurrent = 6;
        double temperature = 25;
        OpenMagnetics::WaveformLabel waveShape = OpenMagnetics::WaveformLabel::FLYBACK_SECONDARY;

        auto inputs = OpenMagnetics::InputsWrapper::create_quick_operating_point_only_current(frequency,
                                                                                              magnetizingInductance,
                                                                                              temperature,
                                                                                              waveShape,
                                                                                              peakToPeak,
                                                                                              dutyCycle,
                                                                                              dcCurrent,
                                                                                              turnsRatios);

        inputs.get_mutable_design_requirements().set_isolation_sides(isolationSides);
        inputs.process_waveforms();

        OpenMagnetics::MagneticAdviser MagneticAdviser;
        auto masMagnetics = MagneticAdviser.get_advised_magnetic(inputs, 1);

        if (masMagnetics.size() > 0) {
            auto masMagnetic = masMagnetics[0].first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }
    }

    TEST(Test_MagneticAdviser_Random_2) {
        auto settings = OpenMagnetics::Settings::GetInstance();
        // settings->set_coil_try_rewind(false);
        srand (time(NULL));

        std::vector<double> turnsRatios;

        std::vector<int64_t> numberTurns = {45, 94};
        std::vector<OpenMagnetics::IsolationSide> isolationSides = {OpenMagnetics::IsolationSide::SECONDARY, OpenMagnetics::IsolationSide::DENARY};

        for (size_t windingIndex = 1; windingIndex < numberTurns.size(); ++windingIndex) {
            turnsRatios.push_back(double(numberTurns[0]) / numberTurns[windingIndex]);
        }

        double frequency = 569910;
        double peakToPeak = 1;
        double magnetizingInductance = 0.00354;
        double dutyCycle = 0.01;
        double dcCurrent = 0;
        double temperature = 25;
        OpenMagnetics::WaveformLabel waveShape = OpenMagnetics::WaveformLabel::TRIANGULAR;

        auto inputs = OpenMagnetics::InputsWrapper::create_quick_operating_point_only_current(frequency,
                                                                                              magnetizingInductance,
                                                                                              temperature,
                                                                                              waveShape,
                                                                                              peakToPeak,
                                                                                              dutyCycle,
                                                                                              dcCurrent,
                                                                                              turnsRatios);

        inputs.get_mutable_design_requirements().set_isolation_sides(isolationSides);
        inputs.process_waveforms();

        OpenMagnetics::MagneticAdviser MagneticAdviser;
        auto masMagnetics = MagneticAdviser.get_advised_magnetic(inputs, 1);

        if (masMagnetics.size() > 0) {
            auto masMagnetic = masMagnetics[0].first;
            OpenMagneticsTesting::check_turns_description(masMagnetic.get_mutable_magnetic().get_coil());
            auto outputFilePath = std::filesystem::path{ __FILE__ }.parent_path().append("..").append("output");
            auto outFile = outputFilePath;
            std::string filename = "MagneticAdviser" + std::to_string(std::rand()) + ".svg";
            outFile.append(filename);
            OpenMagnetics::Painter painter(outFile);

            painter.paint_core(masMagnetic.get_mutable_magnetic());
            painter.paint_bobbin(masMagnetic.get_mutable_magnetic());
            painter.paint_coil_turns(masMagnetic.get_mutable_magnetic());
            painter.export_svg();
        }
    }

}