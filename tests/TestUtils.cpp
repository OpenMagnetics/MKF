#include "Utils.h"
#include "Settings.h"
#include "json.hpp"

#include <UnitTest++.h>
#include <filesystem>
#include <cfloat>
#include <limits>
#include <fstream>
#include <iostream>
#include <magic_enum.hpp>
#include <vector>
using json = nlohmann::json;
#include <typeinfo>

SUITE(Utils) {
    TEST(CeilFloat) {
        double value = 1.263;
        double calculatedValue = OpenMagnetics::ceilFloat(value, 2);
        double expectedValue = 1.27;
        CHECK_EQUAL(expectedValue, calculatedValue);
    }

    TEST(FloorFloat) {
        double value = 1.263;
        double calculatedValue = OpenMagnetics::floorFloat(value, 2);
        double expectedValue = 1.26;
        CHECK_EQUAL(expectedValue, calculatedValue);
    }

    TEST(Modified_Bessel) {
        double calculatedValue = OpenMagnetics::modified_bessel_first_kind(0.0, std::complex<double>{1.0, 0.0}).real();
        double expectedValue = 1.2660658777520084;
        CHECK_CLOSE(expectedValue, calculatedValue, expectedValue * 0.001);
    }


    TEST(Bessel) {
        double calculatedValue = OpenMagnetics::bessel_first_kind(0.0, std::complex<double>{1.0, 0.0}).real();
        double expectedValue = 0.7651976865579666;
        CHECK_CLOSE(expectedValue, calculatedValue, expectedValue * 0.001);

        double calculatedBerValue = OpenMagnetics::kelvin_function_real(0.0, 1.0);
        double expectedBerValue = 0.98438178;
        CHECK_CLOSE(expectedBerValue, calculatedBerValue, expectedBerValue * 0.001);

        double calculatedBeiValue = OpenMagnetics::kelvin_function_imaginary(0.0, 1.0);
        double expectedBeiValue = 0.24956604;
        CHECK_CLOSE(expectedBeiValue, calculatedBeiValue, expectedBeiValue * 0.001);

        double calculatedBerpValue = OpenMagnetics::derivative_kelvin_function_real(0.0, 1.0);
        double expectedBerpValue = -0.06244575217903096;
        CHECK_CLOSE(expectedBerpValue, calculatedBerpValue, fabs(expectedBerpValue) * 0.001);

        double calculatedBeipValue = OpenMagnetics::derivative_kelvin_function_imaginary(0.0, 1.0);
        double expectedBeipValue = 0.49739651146809727;
        CHECK_CLOSE(expectedBeipValue, calculatedBeipValue, expectedBeipValue * 0.001);

    }

    TEST(Test_Complete_Ellipitical_1_0) {
        double calculatedValue = OpenMagnetics::comp_ellint_1(0);
        double expectedValue = std::comp_ellint_1(0);
        CHECK_CLOSE(expectedValue, calculatedValue, expectedValue * 0.001);
    }

    TEST(Test_Complete_Ellipitical_1_1) {
        double calculatedValue = OpenMagnetics::comp_ellint_1(1);
        double expectedValue = std::comp_ellint_1(1);
        CHECK(std::isnan(calculatedValue));
        CHECK(std::isnan(expectedValue));
    }

    TEST(Test_Complete_Ellipitical_1_2) {
        double calculatedValue = OpenMagnetics::comp_ellint_1(std::sin(std::numbers::pi / 18 / 2));
        double expectedValue = std::comp_ellint_1(std::sin(std::numbers::pi / 18 / 2));
        CHECK_CLOSE(expectedValue, calculatedValue, expectedValue * 0.001);
    }

    TEST(Test_Complete_Ellipitical_2_0) {
        double calculatedValue = OpenMagnetics::comp_ellint_2(0);
        double expectedValue = std::comp_ellint_2(0);
        CHECK_CLOSE(expectedValue, calculatedValue, expectedValue * 0.001);
    }

    TEST(Test_Complete_Ellipitical_2_1) {
        double calculatedValue = OpenMagnetics::comp_ellint_2(1);
        double expectedValue = std::comp_ellint_2(1);
        CHECK_CLOSE(expectedValue, calculatedValue, expectedValue * 0.001);
    }

    TEST(Test_Complete_Ellipitical_2_2) {
        double calculatedValue = OpenMagnetics::comp_ellint_2(std::sin(std::numbers::pi / 18 / 2));
        double expectedValue = std::comp_ellint_2(std::sin(std::numbers::pi / 18 / 2));
        CHECK_CLOSE(expectedValue, calculatedValue, expectedValue * 0.001);
    }

    TEST(Test_Find_By_Perimeter) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->set_use_toroidal_cores(true);
        settings->set_use_concentric_cores(true);

        auto shape = OpenMagnetics::find_core_shape_by_winding_window_perimeter(0.03487);

        CHECK_EQUAL("UR 46/21/11", shape.get_name().value());
    }

    TEST(Test_Find_By_Perimeter_Only_Toroids) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->set_use_toroidal_cores(true);
        settings->set_use_concentric_cores(false);

        auto shape = OpenMagnetics::find_core_shape_by_winding_window_perimeter(0.03487);

        CHECK_EQUAL("T 22/12.4/12.8", shape.get_name().value());
    }

    TEST(Test_Get_Shapes_By_Manufacturer) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        auto allShapeNames = OpenMagnetics::get_shape_names();
        auto magneticsShapeNames = OpenMagnetics::get_shape_names("Magnetics");
        auto ferroxcubeShapeNames = OpenMagnetics::get_shape_names("Ferroxcube");

        CHECK(allShapeNames.size() > magneticsShapeNames.size());
        CHECK(allShapeNames.size() > ferroxcubeShapeNames.size());
    }

    TEST(Test_Wire_Names_With_Types) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        auto allWireNames = OpenMagnetics::get_wire_names();
        for (auto wire : allWireNames) {
            CHECK(
                wire.starts_with("Round ") ||
                wire.starts_with("Litz ") ||
                wire.starts_with("Rectangular ") ||
                wire.starts_with("Planar ") ||
                wire.starts_with("Foil ")
                );
        }
    }

    TEST(Test_Wires_With_Type_And_Standard) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        auto allWires = OpenMagnetics::get_wires();
        auto someWires = OpenMagnetics::get_wires(OpenMagnetics::WireType::ROUND, OpenMagnetics::WireStandard::IEC_60317);
        CHECK(someWires.size() < allWires.size());
    }

    TEST(Test_Load_Toroidal_Cores) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        settings->set_use_toroidal_cores(true);
        settings->set_use_concentric_cores(false);
        OpenMagnetics::load_cores();

        auto allCores = coreDatabase;
        CHECK(allCores.size() > 0);
        for (auto core : allCores) {
            CHECK(core.get_type() == OpenMagnetics::CoreType::TOROIDAL);
        }
    }

    TEST(Test_Load_Two_Piece_Set_Cores) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        settings->set_use_toroidal_cores(false);
        settings->set_use_concentric_cores(true);
        OpenMagnetics::load_cores();

        auto allCores = coreDatabase;
        CHECK(allCores.size() > 0);
        for (auto core : allCores) {
            CHECK(core.get_type() == OpenMagnetics::CoreType::TWO_PIECE_SET);
        }
    }

    TEST(Test_Load_Cores_In_Stock) {
        OpenMagnetics::clear_databases();
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        settings->set_use_only_cores_in_stock(false);
        OpenMagnetics::load_cores();

        auto allCores = coreDatabase;

        OpenMagnetics::clear_databases();
        settings->reset();
        settings->set_use_only_cores_in_stock(true);
        OpenMagnetics::load_cores();

        auto onlyCoresInStock = coreDatabase;
        CHECK(allCores.size() > onlyCoresInStock.size());
    }

    TEST(Test_Core_Materials_External) {
        std::string file_path = __FILE__;
        auto external_core_materials_path = file_path.substr(0, file_path.rfind("/")).append("/testData/external_core_materials.ndjson");

        std::ifstream file(external_core_materials_path, std::ios_base::binary | std::ios_base::in);
        if(!file.is_open())
            throw std::runtime_error("Failed to open " + external_core_materials_path);
        using Iterator = std::istreambuf_iterator<char>;
        std::string external_core_materials(Iterator{file}, Iterator{});

        OpenMagnetics::clear_databases();
        OpenMagnetics::load_core_materials(external_core_materials);

        auto allCoreMaterials = coreMaterialDatabase;
        CHECK(allCoreMaterials.size() == 4);
    }

    TEST(Test_Core_Materials_External_And_Internal) {
        std::string file_path = __FILE__;
        auto external_core_materials_path = file_path.substr(0, file_path.rfind("/")).append("/testData/external_core_materials.ndjson");

        std::ifstream file(external_core_materials_path, std::ios_base::binary | std::ios_base::in);
        if(!file.is_open())
            throw std::runtime_error("Failed to open " + external_core_materials_path);
        using Iterator = std::istreambuf_iterator<char>;
        std::string external_core_materials(Iterator{file}, Iterator{});

        OpenMagnetics::clear_databases();
        OpenMagnetics::load_core_materials();

        auto allCoreMaterials = coreMaterialDatabase;

        OpenMagnetics::load_core_materials(external_core_materials);

        auto allCoreMaterialsWithExternal = coreMaterialDatabase;

        CHECK(allCoreMaterialsWithExternal.size() > allCoreMaterials.size());
    }

    TEST(Test_Core_Shapes_Families) {
        CHECK(OpenMagnetics::get_shape_families().size() > 0);
    }

    TEST(Test_Core_Shapes_External) {
        std::string file_path = __FILE__;
        auto external_core_shapes_path = file_path.substr(0, file_path.rfind("/")).append("/testData/external_core_shapes.ndjson");

        std::ifstream file(external_core_shapes_path, std::ios_base::binary | std::ios_base::in);
        if(!file.is_open())
            throw std::runtime_error("Failed to open " + external_core_shapes_path);
        using Iterator = std::istreambuf_iterator<char>;
        std::string external_core_shapes(Iterator{file}, Iterator{});
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        settings->set_use_toroidal_cores(true);
        settings->set_use_concentric_cores(true);

        OpenMagnetics::clear_databases();
        OpenMagnetics::load_core_shapes(false, external_core_shapes);

        auto allCoreShapes = coreShapeDatabase;
        CHECK(allCoreShapes.size() == 10);
    }

    TEST(Test_Core_Shapes_External_And_Internal) {
        std::string file_path = __FILE__;
        auto external_core_shapes_path = file_path.substr(0, file_path.rfind("/")).append("/testData/external_core_shapes.ndjson");

        std::ifstream file(external_core_shapes_path, std::ios_base::binary | std::ios_base::in);
        if(!file.is_open())
            throw std::runtime_error("Failed to open " + external_core_shapes_path);
        using Iterator = std::istreambuf_iterator<char>;
        std::string external_core_shapes(Iterator{file}, Iterator{});
        auto settings = OpenMagnetics::Settings::GetInstance();
        settings->reset();
        settings->set_use_toroidal_cores(true);
        settings->set_use_concentric_cores(true);

        OpenMagnetics::clear_databases();
        OpenMagnetics::load_core_shapes(false);

        auto allCoreShapes = coreShapeDatabase;
        std::cout << "allCoreShapes.size(): " << allCoreShapes.size() << std::endl;

        OpenMagnetics::load_core_shapes(false, external_core_shapes);

        auto allCoreShapesWithExternal = coreShapeDatabase;
        std::cout << "allCoreShapesWithExternal.size(): " << allCoreShapesWithExternal.size() << std::endl;

        CHECK(allCoreShapesWithExternal.size() > allCoreShapes.size());
    }

    TEST(Test_Wires_External) {
        std::string file_path = __FILE__;
        auto external_wires_path = file_path.substr(0, file_path.rfind("/")).append("/testData/external_wires.ndjson");

        std::ifstream file(external_wires_path, std::ios_base::binary | std::ios_base::in);
        if(!file.is_open())
            throw std::runtime_error("Failed to open " + external_wires_path);
        using Iterator = std::istreambuf_iterator<char>;
        std::string external_wires(Iterator{file}, Iterator{});

        OpenMagnetics::clear_databases();
        OpenMagnetics::load_wires(external_wires);

        auto allCoreWires = wireDatabase;
        CHECK(allCoreWires.size() == 24);
    }

    TEST(Test_Wires_External_And_Internal) {
        std::string file_path = __FILE__;
        auto external_wires_path = file_path.substr(0, file_path.rfind("/")).append("/testData/external_wires.ndjson");

        std::ifstream file(external_wires_path, std::ios_base::binary | std::ios_base::in);
        if(!file.is_open())
            throw std::runtime_error("Failed to open " + external_wires_path);
        using Iterator = std::istreambuf_iterator<char>;
        std::string external_wires(Iterator{file}, Iterator{});

        OpenMagnetics::clear_databases();
        OpenMagnetics::load_wires();

        auto allCoreWires = wireDatabase;

        OpenMagnetics::load_wires(external_wires);

        auto allCoreWiresWithExternal = wireDatabase;

        CHECK(allCoreWiresWithExternal.size() > allCoreWires.size());
    }

    TEST(Test_Low_And_High_Harmonics) {
        OpenMagnetics::Harmonics harmonics = json::parse(R"({"amplitudes":[2.8679315866586563e-15,2.3315003998761155,1.1284261163900786],"frequencies":[0,50,400000000]})");
        auto mainHarmonicIndexes = OpenMagnetics::get_main_harmonic_indexes(harmonics, 0.05, 1);

        CHECK(mainHarmonicIndexes.size() == 2);
    }

    TEST(Test_Harmonics_Web_0) {
        OpenMagnetics::Harmonics harmonics = json::parse(R"({"amplitudes":[0.001108043010873542,2.7480369369530333,7.757260417746518,11.420500453413542,13.192042723580053,12.956121824451154,11.032188416012609,8.07087321745358,4.8723453002093144,2.1788301247125816,0.49793001977612833,0.5262100651005384,1.6558124567705623,2.8748849687600058,3.725662556356089,3.9343508260855815,3.469362864358632,2.521293832740498,1.4178888356115853,0.5056741746506784,0.6009493041568086,1.314161928591474,1.9644817109195107,2.321481797732846,2.2715069237994383,1.8462049493172412,1.201360510883134,0.5563542298865527,0.6845493256478005,1.189288851999649,1.5618512517048968,1.6742284364030096,1.494129226289396,1.0907368851426726,0.605963757070412,0.356458054549262,0.7463337141075835,1.0985506032195833,1.2887080237542665,1.2534521660026707,1.0095249471090348,0.6447088995283704,0.2848963113722436,0.4625891276115437,0.7781630943736246,1.0039490321165436,1.0618607957138226,0.9344580481967059,0.6688553826850154,0.3583249636871699,0.272525113839057,0.542360964476251,0.7778040207079714,0.8959952668436442,0.8571248068200851,0.676911107358011,0.41956387212919616,0.17421581441745296,0.36450753543166214,0.5917775149646578,0.7464101257514412,0.7748501138735091,0.6686841955248057,0.4664121133982643,0.2389389019297239,0.2307011993975898,0.4370813476747648,0.609591903665257,0.6876700761422058,0.644938941584347,0.49759154572236114,0.29782536894781103,0.30928914443166544,0.48478940236641815,0.5970568586187253,0.6072053934468771,0.5126620181351883,0.34733482838249635,0.16910378152217884,0.20595761005949897,0.3725307937543588,0.5052581561251183,0.5576262375311505,0.5119620084923515,0.38505813064227173,0.2217076985226547,0.27383508937154405,0.4148881504690419,0.49880676126408346,0.49653975976023634,0.40956288621350506,0.2688599083556784,0.1897522274518476,0.3286381507527708,0.4336594934512939,0.4680638787439794,0.42029778172924215,0.3076493854491149,0.16978379989776002,0.12108153203624251,0.2490557939473185,0.36524471680784204,0.4287119799582565,0.4175089926414146,0.33606224016643405,0.21325719111549213,0.17837286458627086,0.2966119594945884,0.38104057141145564,0.40214848444785967,0.35292993616193585,0.2510327476861436,0.132274965791857,0.1183744709744487,0.23064907234767176,0.3278418576991457,0.37576666442386614,0.3578761425848868,0.2808228321977412,0.1718506702103859,0.1699457462126462,0.2719944677494305,0.34038858219097545,0.35124937604937934,0.3010855278794284,0.20777698761994576,0.10408128449955038,0.11667779861543115,0.2163156756222534,0.2983767401831527,0.3340363445895156,0.31101130882835515,0.23767231784943862,0.1398930563589816,0.1634226387150555,0.2522858359332089,0.30775572292838177,0.31048798535612426,0.25978457390922893,0.17364520574714387,0.11560962567486613,0.2047159806874877,0.27433524053579844,0.3000413233237395,0.2730125518109875,0.20296391267816316,0.11456772552079823,0.1581713956015416,0.23597703499874198,0.28075198401907153,0.2769010985151673,0.2259917113347997,0.14604524703579594,0.11493143094224345,0.19501749178988637,0.2541518520253619,0.27160860434205947,0.2414354941190868,0.17440527898414288,0.09409728291493945,0.1537884020486091,0.22210459203155314,0.2578477573066065,0.24858679613058976,0.1977525771512353,0.12330220657418232,0.11448631255978693,0.18667648125461817,0.23680250299194774,0.2473130285159618,0.214672271312524,0.15048360474427153,0.15000424131224072,0.21002576103841253,0.23802033968718997,0.22426990741564737,0.173752759061106,0.10428553364273922,0.11416677163128584,0.17932364116441768,0.22159059367878134,0.22618261427900016,0.19162299466432597,0.13016046958260277,0.14663265908922118,0.19929650407197125,0.22056150113854137,0.20306474988840814,0.1530762740224848,0.08820423881128618,0.11389676717800089,0.17270019056476568,0.20802711247757621,0.20753301352308687,0.1715106826807611,0.11269950912635902,0.08295089431530708,0.1435412850571222,0.1896013097227318,0.20496653205226284,0.18433799956485208,0.135065644145477,0.11362117374214065,0.1666202378574533,0.1957598563018988,0.1908695597736514,0.15377152061815186,0.09756400859554641,0.08469001065071242,0.14063400481912297,0.18071084762766204,0.190867163831762,0.1676256229399599,0.11923697284919887,0.11329930719812463,0.16094761232085739,0.18452978096694925,0.1758267539902791,0.13798694466989603,0.08435341778484273,0.08627145308332888,0.13783990643641453,0.17245536977867293,0.1779893660140266,0.15258053208152786,0.10522634755354728,0.11290079638733261,0.15558106042292869,0.17414307022974085,0.16212948702986466,0.12384006054275375,0.08768473855546359,0.13510610439238446,0.1647074189828577,0.16612587612672153,0.13893847044285942,0.09275486676591936,0.11240286344036529,0.1504444781130126,0.16445268662447504,0.14956739821655168,0.11108679443667402,0.08892163455665558,0.13239293788460008,0.15737024818336617,0.15511778559177142,0.12649512393615933,0.08160515388737971,0.11178847987220998,0.14548028245829717,0.1553458436800617,0.137977450806706,0.09953627394617248,0.08997577352553789,0.12967067089701104,0.15036985923430454,0.14484187448146207,0.11509036865347788,0.07160518455592477,0.06831778879910855,0.11104508366502443,0.14064480039494923,0.14673528926374227,0.12723180384079869,0.08903716664280212,0.09084238183174345,0.12691716933143019,0.1436494014158807,0.13520169996323742,0.10459718478502768,0.07035115221364982,0.11016366514009762,0.135904988353368,0.13855310770219073,0.11722918916818538,0.07946796644573552,0.09151808406750882,0.12411622976710406,0.13716514726801768,0.12612119744783304,0.09491369797047425,0.07219145003700407,0.10913810080960255,0.13123605080735273,0.1307462261133562,0.10788866314339386,0.0707299575876905,0.09200075763356537,0.1212563524084148,0.130883546364286,0.11754000138860822,0.08595736350319204,0.07383551406032146,0.10796465730964656,0.12661967881201858,0.123273098268485,0.09914500113937655,0.09228942133275804,0.11832982278664969,0.12477903054816378,0.10940996662493374,0.07766064815767589,0.07528092687558825,0.10664161401681083,0.122042724237874,0.11610121758792633,0.09094525021415883,0.09238414712577019,0.11533201185111659,0.11883235251579027,0.10169254306983458,0.06996777761374041,0.07652602639462582,0.10516896975284189,0.11749618542633256,0.1092052240524174,0.08324611235232034,0.060106774137877336,0.09228598769670913,0.11226083297607141,0.1130293091665117,0.09435676696401946,0.06283225454445296,0.0775699070172228,0.10354820986348799,0.11297441890958265,0.10256544326456428,0.07601193275507379,0.061998211323648036,0.09199691477671505,0.10911631334811858,0.10735974673242618,0.08737770437714336,0.07841241745648926,0.10178211715049194,0.10847451757535008,0.09616674452622621,0.06921313527883886,0.06370817372550011,0.0915197646956854,0.10590024981604909,0.10181677513050386,0.08073523105296862,0.07905415525283158,0.09987461499446286,0.1039958130203863,0.08999763760649246,0.0628249927791579,0.06523328141654425,0.09085818868921575,0.1026159278909326,0.0963961397076099,0.07441306568309065,0.07949645801618511,0.09783063432162212,0.09953947171376547,0.08404955035600843,0.05682665142919621,0.06657100704799486,0.09001660620533336,0.09926788849996293,0.091095712835375,0.06839799645560464,0.07974139145729274,0.0956559983856386,0.09510816287125924,0.07831624498713617,0.06771965861508143,0.08900015996818295,0.09586173125863569,0.08591507784372851,0.06267925671546569,0.054761173924912296,0.07979173428237535,0.09335732097057316,0.09070578178031835,0.07279334189683134,0.0686783624549167,0.08781467192496248,0.0924039459793203,0.0808551849097904,0.057248016938473076,0.05641615350513831,0.07965096003943818,0.09094191478800444,0.08633721648874511,0.06747792781433211,0.06944704573341884,0.08646659946608963,0.08890176625824865,0.0759180636431265,0.05790393982359278,0.07932321602061847,0.08841770769250423,0.08200814879181478,0.06236823078238283,0.07002641788078766,0.08496299150423486,0.08536304052629044,0.0711065808361892,0.05922107455064979,0.07881329933829025,0.08579316495946311,0.07772488266348687,0.057463348670379104,0.07041795059163457,0.08331144414608799,0.08179611709124106,0.06642423459806998,0.060364998928574894,0.0781266303044215,0.08307721632906521,0.07349419490827694,0.05276302101371339,0.0706238561191275,0.08152005579985352,0.07820974053988575,0.061874978122614964,0.0613340274481614,0.07726922325798236,0.08027918686520068,0.06932320403111805,0.05089437518692635,0.07064706368793401,0.07959738164513823,0.07461295750254185,0.05746306787026279,0.0621273222340108,0.07624765499280359,0.0774087309372254,0.06521925423718379,0.05229942414640417,0.07049119392099762,0.07755238745844058,0.07101503026040136,0.05319293209682916,0.06274486745615411,0.0750690309540329,0.0744757688287031,0.06118981216873135,0.053549264341282744,0.07016053123219998,0.07539440283472758,0.06742535703985564,0.04906905653938107,0.06318744324678253,0.07374094937552043,0.07149042562783446,0.05724237451528176,0.05464080805406365,0.06965999418659402,0.07313307388776194,0.0638533981146495,0.06345659874272357,0.07227146354574494,0.06846297216943863,0.05338438504131259,0.055571847566864056,0.06899510386548223,0.07077831553933955,0.060308607051275935,0.06355462397160204,0.07066904239210317,0.06540376788732107,0.049623159888112535,0.056341028865059734,0.06817195030719102,0.06834026353223802,0.05680036659611051,0.04785606769515481,0.063484520389384,0.0689425295830765,0.062323205501858214,0.05694782516483614,0.06719715712130382,0.06582922631975273,0.05333792883153177,0.049020227801780905,0.0632499699490225,0.06710110135496135,0.05923165752258402,0.05739250985185113,0.06607784439395165,0.06325563699691121,0.04993035932386937,0.05003907111206268,0.06285530263276103,0.06515422327231034,0.05613942458271055,0.057676128522567226,0.06482159002393043,0.060630005449498696,0.04658648506321433,0.050910134505158834,0.06230546242814846,0.0631116061329376,0.05305668565040798,0.05780046990225753,0.06343638964303432,0.057962870903218035,0.051631787792022446,0.061605971774520416,0.06098316123982006,0.04999345019024472,0.05776803548200303,0.061930615286497695,0.055264755057551115,0.052203209238122036,0.060762894529282206,0.05877895525161078,0.046959512353552,0.04530329391122683,0.057582007778185645,0.06031297299243103,0.05254611599342067,0.052624360072496504,0.05978279753916143,0.05650916483293963,0.04396440729361144,0.04624197422764818,0.05724621716319015,0.058592459515899184,0.04981730304042011,0.05289595778246562,0.05867271092257664,0.05418403132165261,0.04704388405934572,0.056765107260178325,0.05677831835036966,0.047088512787957434,0.05301944805168031,0.05744008718498781,0.05181381562470867,0.047707293437141786,0.05614369893037867,0.05487999525781073,0.04436974642375434,0.05299697525788029,0.05609275931880174,0.04940875356718854,0.04823124930618929,0.055387552905138505,0.052907093502589465,0.04218328891895797,0.05283135147490614,0.05463889802714694,0.04697901188162773,0.048615552428687626,0.05450273115073209,0.05086932900080079,0.04304061447302091,0.05252602398052221,0.0530869682544817,0.04453464506314856,0.04886073272956659,0.053495757065861904,0.048776485583661405,0.04377067793458432,0.052085041288397194,0.05144568518935955,0.04208555327484226,0.048968023021816465,0.05237357463534899,0.046638370580351446,0.044371768794677274,0.05151301775721159,0.04972396992388384,0.048939331083019254,0.0511435066778941,0.0444647709215312,0.04484291627834005,0.050815096853893536,0.047930904956790574,0.04877721008650689,0.049813212337368795,0.0422654099610283,0.04518386864719106,0.04999691316759833,0.04607568972996458,0.040292123034365024,0.04848482741948653,0.04839064397913054,0.040049905209183854,0.04539507067182128,0.04906455328893146,0.04416759638854132,0.040950994669335876,0.048065931945153156,0.04688400366027096,0.04547763926664029,0.04802451568508889,0.042215925956945746,0.04148925383288003,0.0475248197866883,0.045301699348958,0.04543333730432741,0.046883669713930966,0.04022996511981144,0.041905987617613785,0.04686629873151898,0.04365230107288978,0.04526454565363859,0.045649213930507894,0.04220096541042543,0.04609565136874804,0.041944497179735675,0.04497423350439978,0.04432863384904607,0.042374618266824954,0.04521859708989422,0.040187050893563864,0.03848562644562225,0.044565927062585484,0.04292965932899902,0.042428016294456486,0.04424125309094315,0.03838875735050284,0.03896246642343398,0.044043676716862316,0.041460221760603856,0.04236284410243306,0.04317009453020884,0.03932528325734604,0.04341202279108499,0.03992841122714188,0.04218137438276897,0.04201191399861482,0.03957391609792961,0.04267596001192948,0.03834243382420907,0.04188643971279923,0.040773780469752524,0.03970883064282344,0.041840900831907106,0.04148140268291056,0.039462997902330925,0.03973109801521029,0.040912637756664004,0.03672003749293488,0.04097012446478496,0.038087063669668644,0.03964237164033475,0.039897304835650585,0.03703061709568939,0.04035693194821504,0.036653626992739365,0.039444862209737135,0.03880133848043925,0.0372338549613718,0.03964658358857336,0.03914131083654913,0.03763143778032923,0.037330283113948974,0.03884423411080388,0.038734960519166174,0.03639452448952696,0.037321005850444004,0.03795539822802678,0.038229526040078184,0.03720767782097006,0.03698591353752121,0.0376291624385173,0.03699248018655769,0.03594190276080202,0.03512872698405839,0.03693843220397836,0.03667809497202947,0.03482973550434023,0.035187795797986386,0.03616227134295241,0.036267677734779825,0.03514752886023497,0.03530595448216558,0.03576482868920458,0.03500960362405592,0.03437505917221919,0.035173562427791585,0.03477619391836911,0.03449827639019928,0.03444994534090504,0.033743718238345176,0.03403394900260915,0.0335317137628171],"frequencies":[0,8472,25416,42360,59304,76248,93192,110136,127080,144024,160968,194856,211800,228744,245688,262632,279576,296520,313464,330408,381240,398184,415128,432072,449016,465960,482904,499848,567624,584568,601512,618456,635400,652344,669288,737064,754008,770952,787896,804840,821784,838728,855672,923448,940392,957336,974280,991224,1008168,1025112,1092888,1109832,1126776,1143720,1160664,1177608,1194552,1211496,1279272,1296216,1313160,1330104,1347048,1363992,1380936,1448712,1465656,1482600,1499544,1516488,1533432,1550376,1635096,1652040,1668984,1685928,1702872,1719816,1736760,1804536,1821480,1838424,1855368,1872312,1889256,1906200,1990920,2007864,2024808,2041752,2058696,2075640,2160360,2177304,2194248,2211192,2228136,2245080,2262024,2329800,2346744,2363688,2380632,2397576,2414520,2431464,2516184,2533128,2550072,2567016,2583960,2600904,2617848,2685624,2702568,2719512,2736456,2753400,2770344,2787288,2872008,2888952,2905896,2922840,2939784,2956728,2973672,3041448,3058392,3075336,3092280,3109224,3126168,3143112,3227832,3244776,3261720,3278664,3295608,3312552,3397272,3414216,3431160,3448104,3465048,3481992,3498936,3583656,3600600,3617544,3634488,3651432,3668376,3753096,3770040,3786984,3803928,3820872,3837816,3854760,3939480,3956424,3973368,3990312,4007256,4024200,4108920,4125864,4142808,4159752,4176696,4193640,4295304,4312248,4329192,4346136,4363080,4380024,4464744,4481688,4498632,4515576,4532520,4549464,4651128,4668072,4685016,4701960,4718904,4735848,4820568,4837512,4854456,4871400,4888344,4905288,4990008,5006952,5023896,5040840,5057784,5074728,5176392,5193336,5210280,5227224,5244168,5261112,5345832,5362776,5379720,5396664,5413608,5430552,5532216,5549160,5566104,5583048,5599992,5616936,5701656,5718600,5735544,5752488,5769432,5786376,5888040,5904984,5921928,5938872,5955816,6057480,6074424,6091368,6108312,6125256,6142200,6243864,6260808,6277752,6294696,6311640,6413304,6430248,6447192,6464136,6481080,6498024,6599688,6616632,6633576,6650520,6667464,6769128,6786072,6803016,6819960,6836904,6853848,6938568,6955512,6972456,6989400,7006344,7023288,7124952,7141896,7158840,7175784,7192728,7294392,7311336,7328280,7345224,7362168,7379112,7480776,7497720,7514664,7531608,7548552,7650216,7667160,7684104,7701048,7717992,7734936,7836600,7853544,7870488,7887432,7904376,8006040,8022984,8039928,8056872,8073816,8192424,8209368,8226312,8243256,8260200,8361864,8378808,8395752,8412696,8429640,8548248,8565192,8582136,8599080,8616024,8717688,8734632,8751576,8768520,8785464,8887128,8904072,8921016,8937960,8954904,8971848,9073512,9090456,9107400,9124344,9141288,9242952,9259896,9276840,9293784,9310728,9429336,9446280,9463224,9480168,9497112,9598776,9615720,9632664,9649608,9666552,9785160,9802104,9819048,9835992,9852936,9954600,9971544,9988488,10005432,10022376,10140984,10157928,10174872,10191816,10208760,10310424,10327368,10344312,10361256,10378200,10496808,10513752,10530696,10547640,10666248,10683192,10700136,10717080,10734024,10835688,10852632,10869576,10886520,10903464,11022072,11039016,11055960,11072904,11089848,11191512,11208456,11225400,11242344,11259288,11377896,11394840,11411784,11428728,11547336,11564280,11581224,11598168,11615112,11733720,11750664,11767608,11784552,11903160,11920104,11937048,11953992,11970936,12089544,12106488,12123432,12140376,12258984,12275928,12292872,12309816,12326760,12445368,12462312,12479256,12496200,12614808,12631752,12648696,12665640,12784248,12801192,12818136,12835080,12852024,12970632,12987576,13004520,13021464,13140072,13157016,13173960,13190904,13207848,13326456,13343400,13360344,13377288,13495896,13512840,13529784,13546728,13563672,13682280,13699224,13716168,13733112,13851720,13868664,13885608,13902552,14038104,14055048,14071992,14088936,14207544,14224488,14241432,14258376,14393928,14410872,14427816,14444760,14563368,14580312,14597256,14614200,14732808,14749752,14766696,14783640,14919192,14936136,14953080,14970024,15088632,15105576,15122520,15139464,15275016,15291960,15308904,15325848,15444456,15461400,15478344,15495288,15630840,15647784,15664728,15681672,15800280,15817224,15834168,15851112,15986664,16003608,16020552,16156104,16173048,16189992,16206936,16342488,16359432,16376376,16511928,16528872,16545816,16562760,16681368,16698312,16715256,16732200,16867752,16884696,16901640,16918584,17037192,17054136,17071080,17088024,17223576,17240520,17257464,17393016,17409960,17426904,17443848,17579400,17596344,17613288,17748840,17765784,17782728,17799672,17935224,17952168,17969112,18104664,18121608,18138552,18274104,18291048,18307992,18324936,18460488,18477432,18494376,18629928,18646872,18663816,18680760,18816312,18833256,18850200,18985752,19002696,19019640,19036584,19172136,19189080,19206024,19341576,19358520,19375464,19527960,19544904,19561848,19697400,19714344,19731288,19883784,19900728,19917672,20053224,20070168,20087112,20222664,20239608,20256552,20273496,20409048,20425992,20442936,20578488,20595432,20612376,20764872,20781816,20798760,20934312,20951256,20968200,21120696,21137640,21154584,21290136,21307080,21324024,21476520,21493464,21645960,21662904,21679848,21832344,21849288,22001784,22018728,22035672,22171224,22188168,22205112,22357608,22374552,22391496,22527048,22543992,22560936,22713432,22730376,22882872,22899816,22916760,23069256,23086200,23238696,23255640,23272584,23425080,23442024,23594520,23611464,23780904,23797848,23950344,23967288,24119784,24136728,24153672,24306168,24323112,24475608,24492552,24509496,24661992,24678936,24831432,24848376,25017816,25034760,25187256,25204200,25373640,25390584,25543080,25560024,25729464,25898904,25915848,26085288,26254728,26271672,26424168,26441112,26610552,26627496,26779992,26796936,26966376,27135816,27152760,27322200,27491640,27508584,27678024,27847464,28033848,28203288,28389672,28559112,28914936]})");
        auto mainHarmonicIndexes = OpenMagnetics::get_main_harmonic_indexes(harmonics, 0.2, 1);

        std::cout << harmonics.get_amplitudes().size() << std::endl;
        std::cout << mainHarmonicIndexes.size() << std::endl;
        CHECK(mainHarmonicIndexes.size() == 2);
    }

}